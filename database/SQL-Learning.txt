
1.查找最晚入职员工的所有信息
    描述：有一个员工employees表简况如下:
        select * from employees where hire_date=(select max(hire_date) from employees);


2.查找倒数第三员工的所有信息
    select * from employees where hire_date=(
        select distinct hire_date from employees
            order by hire_date desc limit 1 offset 2)
    其中limit 1,offset 2：表示去掉排名倒数第一第二的时间，取倒数第三的时间；

    select * from test LIMIT 3 OFFSET 1;(在mysql 5以后支持这种写法)
    当 limit和offset组合使用的时候，limit后面只能有一个参数，表示要取的的数量,offset表示要跳过的数量。

3.请你查找各个部门当前领导的薪水详情以及其对应部门编号dept_no，输出结果以salaries.emp_no升序排序，并且请注意输出结果里面dept_no列是最后一列；
    select salaries.emp_no, salaries.salary, salaries.from_date, salaries.to_date, dept_manager.dept_no
    from salaries,dept_manager
        where salaries.emp_no=dept_manager.emp_no
            order by salaries.emp_no


4.请你查找所有已经分配部门的员工的last_name和first_name以及dept_no，未分配的部门的员工不显示；
   select employees.last_name,employees.first_name,dept_emp.dept_no
    from employees,dept_emp
        where employees.emp_no=dept_emp.emp_no

5.请你查找所有已经分配部门的员工的last_name和first_name以及dept_no，也包括暂时没有分配具体部门的员工；
    (1)左连接：
        以左表为基础，根据on后给出的两表的条件将两表连接起来，结果会将左表所有的查询信息列出，而右边只列出on后条件与左表满足的部分。
        左表(table 1)全部保留,右表(table 2)关联不上用null表示。
        SELECT * FROM table1 LEFT JOIN table2 ON table1.a=table2.b
    (2)右连接：
        与左连接相反。
        右表(table2)全部保留，左表(table1)关联不上的用null表示。
        SELECT * FROM table1 RIGHT JOIN table2 ON table1.a=table2.b
    (3)内连接：
        保留两个表共有的部分。
        SELECT * FROM table1 inner JOIN table2 ON table1.a=table2.b

    select last_name, first_name, dept_no from employees left join dept_emp
        on employees.emp_no=dept_emp.emp_no

6.请你查找薪水记录超过15条的员工号emp_no以及其对应的记录次数t，内容如下：--牛客网SQL7
    select emp_no, count(emp_no) as t from salaries
        group by emp_no having t>15;

    group by和having一起使用；

7.请你找出所有员工具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示，以上例子输出如下：---牛客网SQL8
    select salary from salaries
        group by salary
            order by salary desc

    需要注意的点：
        1.相同的薪水只显示一次：使用group by实现
        2.逆序显示：order by 名称 desc

8.获取所有非manager的员工emp_no----牛客网SQL10
    请你找出所有非部门领导的员工emp_no，以上例子输出:

    NOT IN+子查询
    select emp_no from employees as e
        where emp_no not in (select emp_no from dept_manager)

    left join 左连接+is null
        select e.emp_no from employees as e
            left join dept_manager as d
                on e.emp_no = d.emp_no
                    where dept_no is NULL;


9.获取所有的员工和员工对应的经理，如果员工本身是经理的话则不显示，以上例子如下:
    select e.emp_no, m.emp_no from dept_emp as e inner join dept_manager as m
      on e.dept_no = m.dept_no
       where e.emp_no!=m.emp_no


10.获取每个部门中当前员工薪水最高的相关信息----SQL12  （需要重点分析）
    获取每个部门中当前员工薪水最高的相关信息，给出dept_no, emp_no以及其对应的salary，按照部门编号dept_no升序排列，以上例子输出如下:
     SELECT
        e.dept_no,
        e.emp_no,
        maxSalary
    FROM
        dept_emp e
        INNER JOIN salaries s ON e.emp_no = s.emp_no
        INNER JOIN (
        SELECT
            e.dept_no,
            max( s.salary ) AS maxSalary
        FROM
            dept_emp e
            INNER JOIN salaries s ON e.emp_no = s.emp_no
        GROUP BY
            e.dept_no
        ) AS m ON e.dept_no = m.dept_no
        AND s.salary = m.maxSalary
    ORDER BY
        e.dept_no


11.查找employees表emp_no与last_name的员工信息---SQL15
    请你查找employees表所有emp_no为奇数，且last_name不为Mary的员工信息，并按照hire_date逆序排列，以上例子查询结果如下:
     select emp_no,birth_date,first_name,last_name,gender,hire_date from employees
        where emp_no % 2 = 1
        and last_name<>'Mary'
        order by hire_date desc;
    注：
        1.不等于：”<>“;
        2.基数：emp % 2 =1


12.统计出当前各个title类型对应的员工当前薪水对应的平均工资---SQL16
    请你统计出各个title类型对应的员工薪水对应的平均工资avg。结果给出title以及平均工资avg，并且以avg升序排序，以上例子输出如下:
        select t.title, avg(s.salary) from titles as t inner join salaries as s
            on t.emp_no=s.emp_no
             group by t.title

    注：内连接，将相同的字段处理相同，然后分组；求平均值

13.获取当前薪水第二多的员工的emp_no以及其对应的薪水salary---SQL17
    请你获取薪水第二多的员工的emp_no以及其对应的薪水salary，
       若有多个员工的薪水为第二多的薪水，则将对应的员工的emp_no和salary全部输出，并按emp_no升序排序。
            select emp_no,salary from salaries
              where salary = (select distinct salary from salaries
                order by salary desc limit 1,1 ) ;

        注：第二员工最多的使用limit；distinct筛选出相应的内容；

14.获取当前薪水第二多的员工的emp_no以及其对应的薪水salary---SQL18
    请你查找薪水排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不能使用order by完成，以上例子输出为:
      （温馨提示:sqlite通过的代码不一定能通过mysql，因为SQL语法规定，使用聚合函数时，select子句中一般只能存在以下三种元素：常数、聚合函数，group by 指定的列名。如果使用非group by的列名，sqlite的结果和mysql 可能不一样)
        select e.emp_no emp_no,s.salary salary,e.last_name last_name,e.first_name first_name
          from employees as e
            inner join salaries as s
             on e.emp_no = s.emp_no and s.to_date='9999-01-01'
              where s.salary=(
                select max(s2.salary)
                 from salaries s2
                 where
                    s2.salary < (select max(salary) from salaries where to_date='9999-01-01')
                   and s2.to_date='9999-01-01'
             );

        注：第二大<最大值，以此筛选出第二多的员工

15.查找所有员工的last_name和first_name以及对应的dept_name---SQL19
    请你查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工，以上例子输出如下:

    先内连接筛选出dept_no和emp_no的内容，然后于employee的表左外连接，即可得到最终的筛选内容：
        （1）select d.dept_name, dp.emp_no from departments as d inner join dept_emp as dp on
            d.dept_no = dp.dept_no
        （2）左外连接得到最终的结果：
            SELECT e.last_name, e.first_name, b.dept_name FROM employees AS e
                LEFT JOIN (SELECT d.dept_name,de.emp_no
                  FROM departments AS d
                   INNER JOIN dept_emp AS de
                    ON d.dept_no=de.dept_no
                   ) AS b
                ON e.emp_no=b.emp_no;

16.查找在职员工自入职以来的薪水涨幅情况：----SQL21
    请你查找在职员工自入职以来的薪水涨幅情况，给出在职员工编号emp_no以及其对应的薪水涨幅growth，并按照growth进行升序，以上例子输出为
    （注: to_date为薪资调整某个结束日期，或者为离职日期，to_date='9999-01-01'时，表示依然在职，无后续调整记录）
        select b.emp_no, (b.salary-a.salary) as growth from
          (select e.emp_no, s.salary from employees e left join salaries s
            on e.emp_no=s.emp_no and e.hire_date=s.from_date) a---入职工资表
            inner join
            (select e.emp_no,s.salary from employees e left join salaries s
             on e.emp_no=s.emp_no where to_date='9999-01-01') b---现在工资表

            on a.emp_no=b.emp_no
            order by growth


17.统计各个部门的工资记录数---SQL22
    请你统计各个部门的工资记录数，给出部门编码dept_no、部门名称dept_name以及部门在salaries表里面有多少条记录sum，按照dept_no升序排序，以上例子输出如下:
    select d.dept_no,d.dept_name, count(s.salary) as SUM from
        departments d join dept_emp de
        on d.dept_no = de.dept_no
        join salaries s on s.emp_no=de.emp_no
        group by d.dept_no
        order by d.dept_no ASC
    注：join的用法

18.对所有员工的薪水按照salary降序进行1-N的排名---SQL23
    对所有员工的薪水按照salary降序先进行1-N的排名，如果salary相同，再按照emp_no升序排列：
    使用窗口函数：
        select emp_no, salary, dense_rank() over(order by salary desc) as 'rank' from salaries
            where to_date='9999-01-01'
    不使用窗口函数；
        -- rank排名：查询表中大于自己薪水的员工的数量（考虑并列：去重）
        SELECT  s1.emp_no, s1.salary,(SELECT COUNT(DISTINCT s2.salary)
            FROM salaries s2 WHERE s2.to_date = '9999-01-01' AND s2.salary >= s1.salary) AS `rank`  -- 去重：计算并列排名
        FROM
          salaries s1
        WHERE s1.to_date = '9999-01-01'
        ORDER BY s1.salary DESC,
          s1.emp_no ;


    注：窗口函数用法：
        1.<窗口函数> OVER ( [PARTITION BY <列清单> ]
                         ORDER BY <排序用列清单> ）

        2.RANK()：
            在计算排序时，若存在相同位次，会跳过之后的位次。
            例如，有3条排在第1位时，排序为：1，1，1，4······
        3.DENSE_RANK()
            这就是题目中所用到的函数，在计算排序时，若存在相同位次，不会跳过之后的位次。
            例如，有3条排在第1位时，排序为：1，1，1，2······

        4.ROW_NUMBER()
            这个函数赋予唯一的连续位次。
            例如，有3条排在第1位时，排序为：1，2，3，4······

19.获取所有非manager员工当前的薪水情况--SQL24
    获取所有非manager员工薪水情况，给出dept_no、emp_no以及salary，以上例子输出:
        select de.dept_no,a.emp_no,s.salary from
            (select emp_no from employees
               where emp_no not in (select emp_no from dept_manager)) a
            inner join dept_emp de on a.emp_no=de.emp_no
            inner join salaries s on s.emp_no=a.emp_no
            where s.to_date='9999-01-01'

        注意：inner join

20. 获取员工其当前的薪水比其manager当前薪水还高的相关信息---SQL25
        获取员工其当前的薪水比其manager当前薪水还高的相关信息，
            第一列给出员工的emp_no，
            第二列给出其manager的manager_no，
            第三列给出该员工当前的薪水emp_salary,
            第四列给该员工对应的manager当前的薪水manager_salary
            以上例子输出如下:

           第一种：多个表直接级联；
            select de.emp_no, dm.emp_no as manager_no,s1.salary as emp_salary,s2.salary as manager_salary
                from dept_emp de, dept_manager dm, salaries s1,salaries s2
                where de.dept_no=dm.dept_no
                 and de.emp_no=s1.emp_no
                 and dm.emp_no=s2.emp_no
                 and s1.salary>s2.salary
                 and s2.to_date='9999-01-01'
                 and s1.to_date='9999-01-01';
           第二种：先将员工工资表和manager工资表的信息筛选出来，然后在将两个产生的数据连接就好
                SELECT a.emp_no, b.manager_no, a.emp_salary, b.manager_salary
                FROM
                    (SELECT de.dept_no, de.emp_no, s.salary AS emp_salary
                    FROM dept_emp de, salaries s
                    WHERE de.emp_no=s.emp_no
                    AND s.to_date='9999-01-01') a,
                    (SELECT dm.dept_no, dm.emp_no AS manager_no, s.salary AS manager_salary
                    FROM dept_manager  dm, salaries s
                    WHERE dm.emp_no=s.emp_no
                    AND s.to_date='9999-01-01') b
                WHERE a.dept_no=b.dept_no
                AND a.emp_salary>b.manager_salary;


21.汇总各个部门当前员工的title类型的分配数目---SQL26
     汇总各个部门当前员工的title类型的分配数目，
        即结果给出部门编号dept_no、dept_name、其部门下所有的员工的title以及该类型title对应的数目count，结果按照dept_no升序排序，dept_no一样的再按title升序排序
            SELECT det.dept_no,det.dept_name,det.title,COUNT(title) count
                FROM (SELECT de.dept_no,d.dept_name,t.title
                FROM dept_emp de
                INNER JOIN departments d
                ON de.dept_no=d.dept_no
                INNER JOIN titles t
                ON de.emp_no=t.emp_no
                ) det
            GROUP BY det.dept_no ,det.title
            order by det.dept_no ;


22.使用join查询方式找出没有分类的电影id以及名称---SQL29
    使用join查询方式找出没有分类的电影id以及其电影名称。
        select f.film_id as '电影id',f.title as '名称' from film f
          where f.film_id not in (select f.film_id from film f
            inner join film_category fc
            on f.film_id=fc.film_id
            inner join category c
            on fc.category_id=c.category_id)


23.使用子查询的方式找出属于Action分类的所有电影对应的title,description---SQL30
    你能使用子查询的方式找出属于Action分类的所有电影对应的title,description吗
        select f.title, f.description from film f inner join film_category fc
            on f.film_id=fc.film_id
            where fc.category_id in
                (select c.category_id from category c where name='Action') -- 筛选出action的分类id

24.将employees表的所有员工的last_name和first_name拼接起来作为Name---SQL32
    请将employees表的所有员工的last_name和first_name拼接起来作为Name，中间以一个空格区分。
        (注：sqllite,字符串拼接为 || 符号，不支持concat函数，mysql支持concat函数)。
        select concat(last_name," ", first_name) from employees

        注：拼接方法：concat；


25.创建一个actor表，包含如下列信息。 ---SQL33
     create table actor(
        actor_id smallint(5) primary key comment'主键',
        first_name varchar(45) not null comment'名字',
        last_name varchar(45) not null comment'姓氏',
        last_update date not null comment'日期'
    );


26.批量插入数据 ---SQL34
    insert into actor(actor_id,
                  first_name,
                  last_name,
                  last_update)
    values(1,'PENELOPE', 'GUINESS', '2006-02-15 12:34:33'),
          (2,'NICK','WAHLBERG','2006-02-15 12:34:33');


27.批量插入数据，不使用replace操作 ---SQL35
    对于表actor插入如下数据,如果数据已经存在，请忽略(不支持使用replace操作)
    insert ignore into actor values('3','ED','CHASE','2006-02-15 12:34:33');

    注：
        1.insert into 表示插入数据，数据库会检查主键，如果出现重复会报错；
        2.replace into表示插入替换数据，需求表中有PrimaryKey，或者unique索引，如果数据库已存在数据，则用新数据替换，如果没有数据效果则和insert into一样。
        3.insert ignore表示，如果表中已经存在相同的记录，则忽略当前新数据；

28.创建一个actor_name表---SQL36
    请你创建一个actor_name表，并且将actor表中的所有first_name以及last_name导入该表.
        actor_name表结构如下，题目最后会查询actor_name表里面的数据来对比结果输出：

    create table if not exists actor_name(
        first_name varchar(45) not null,
        last_name varchar(45) not null); -- 创建表

    insert into actor_name select first_name,last_name from actor; -- 插入查询结构

    注：插入查询表的结构内容；

29.对first_name创建唯一索引uniq_idx_firstname---SQL37
    对first_name创建唯一索引uniq_idx_firstname，对last_name创建普通索引idx_lastname：

    1.使用create创建索引
      CREATE UNIQUE INDEX uniq_idx_firstname on actor (first_name);  -- 创建唯一索引
      CREATE INDEX idx_lastname ON actor (last_name);        -- 创建普通索引

    2.使用alter创建索引
      alter table actor add unique uniq_idx_firstname(first_name); -- 创建唯一索引
      alter table actor add index idx_lastname(last_name);    -- 创建普通索引

    注：
        1.使用create创建索引方式：
            普通索引：create index 索引名 on 表名(col1, col2, ..., )
            唯一索引：create unique index 索引名 on 表名(col1, col2, ..., )
        2.使用alter创建索引：
            主键索引：
                特点：数据列不允许重复，不能为null,一张表只能有一个主键；Mysql主动将该字段进行排序
                ALTER TABLE 表名 ADD Primary key (col);
            唯一索引：
                特点：索引列是唯一的，可以null；Mysql主动将该字段进行排序
                ALTER TABLE 表名 ADD unique <索引名> (col1, col2, ...col3);
            普通索引：
                特点：添加普通索引， 索引值不唯一，可为null
                Alter table 表名 ADD index <索引名> (col1, col2, ...,);
            全文索引：
                特点：只能在文本类型CHAR，VARCHAR, TEXT类型字段上创建全文索引；
                ALTER TABLE 表名 ADD Fulltext <索引名> (col)
            多列索引：
                特点：多列是唯一的
                ALTER TABLE 表名 ADD UNIQUE (col1, col2, ..., )

30.针对actor表创建视图actor_name_view---SQL38
    针对actor表创建视图actor_name_view，只包含first_name以及last_name两列，并对这两列重新命名，first_name为first_name_v，last_name修改为last_name_v：
    后台会插入2条数据:
        insert into actor values ('1', 'PENELOPE', 'GUINESS', '2006-02-15 12:34:33'), ('2', 'NICK', 'WAHLBERG', '2006-02-15 12:34:33');
    然后打印视图名字和插入的数据

    创建视图
        create view actor_name_view(first_name_v, last_name_v) as
            select first_name, last_name from actor
    或者是：
        create view actor_name_view as
           select first_name as first_name_v, last_name as last_name_v from actor

31.针对上面的salaries表emp_no字段创建索引idx_emp_no。---SQL39
    针对salaries表emp_no字段创建索引idx_emp_no，查询emp_no为10005，使用强制索引。
    后台会检查是否使用强制索引。
     select * from salaries
      force index(idx_emp_no)  -- 强制索引的方法
      where emp_no=10005

32.在last_update后面新增加一列名字为create_date---SQL40
    现在在last_update后面新增加一列名字为create_date, 类型为datetime, NOT NULL，默认值为'2020-10-01 00:00:00'
    alter table `actor`
        add column `create_date` datetime not null default '2020-10-01 00:00:00'

    注：
     1.actor和create_date的不是单引号：是"``";
     2.最后一列增加列：alter table 表名 add column ……
     3.指定位置增加列：alter table 表名 add column ……after列名
     4.在第一列增加列：alter table 表名 add column ……first

33.构造一个触发器audit_log---SQL41
    构造一个触发器audit_log，在向employees_test表中插入一条数据的时候，触发插入相关的数据到audit中。
    后台会往employees_test插入一条数据:
      INSERT INTO employees_test (ID,NAME,AGE,ADDRESS,SALARY)VALUES (1, 'Paul', 32, 'California', 20000.00 );
    然后从audit里面使用查询语句:
      select * from audit;

    create trigger audit_log
        after insert on employees_test
        for each row
        begin
            insert into audit values(new.id, new.name);
        end

    注：
      CREATE TRIGGER trigger_name
        trigger_time trigger_event ON tbl_name
        FOR EACH ROW
        trigger_stmt
      其中：
            trigger_name：标识触发器名称，用户自行指定；
            trigger_time：标识触发时机，取值为 BEFORE 或 AFTER；
            trigger_event：标识触发事件，取值为 INSERT、UPDATE 或 DELETE；
            tbl_name：标识建立触发器的表名，即在哪张表上建立触发器；
            trigger_stmt：触发器程序体，可以是一句SQL语句，或者用 BEGIN 和 END 包含的多条语句，每条语句结束要分号结尾。

      MySQL 中定义了 NEW 和 OLD，用来表示
        触发器的所在表中，触发了触发器的那一行数据。
        具体地：
        1.在 INSERT 型触发器中，NEW 用来表示将要（BEFORE）或已经（AFTER）插入的新数据；
        2.在 UPDATE 型触发器中，OLD 用来表示将要或已经被修改的原数据，NEW 用来表示将要或已经修改为的新数据；
        3.在 DELETE 型触发器中，OLD 用来表示将要或已经被删除的原数据；
          使用方法： NEW.columnName （columnName 为相应数据表某一列名）


34.删除emp_no重复的记录，只保留最小的id对应的记录。---SQL42

    delete from titles_test
      where id not in(
        select * from (  -- 给结果取个别名叫l，这样我们就不是从原始表中查询结果删除而是L表查询结果并删除
            select min(id)
            from titles_test
            group by emp_no
        ) a
      );

     注：MySQL中不允许在子查询的同时删除表数据（不能一边查一边把查的表删了）

35.将所有to_date为9999-01-01的全部更新为NULL。---SQL43
    将所有to_date为9999-01-01的全部更新为NULL,且 from_date更新为2001-01-01。

    update titles_test
        set to_date=NULL, from_date='2001-01-01'
        where to_date='9999-01-01'

36.将id=5以及emp_no=10001的行数据替换成id=5以及emp_no=10005。----SQL44
    将id=5以及emp_no=10001的行数据替换成id=5以及emp_no=10005,其他数据保持不变，使用replace实现，直接使用update会报错。

      UPDATE titles_test
         SET emp_no = REPLACE(emp_no, 10001, 10005)
         WHERE id = 5;

     注：replace()函数含义：
        1）replace(str1,str2,str3)
           说明：str3替换str1中出现的所有str2，返回新的字符串，如果有某个参数为NULL，此函数返回NULL
            该函数可以多次替换，只要str1中还有str2存在，最后都被替换成str3 若str3为空，则删除str2；

        2）replace函数的格式为：replace(string text, from text, to text)，意为把字串string里出现地所有子字串 from 替换成子字串 to.
            例如：replace(‘abcdefabcdef’, ‘cd’, ‘XX’)结果为：abXXefabXXef。
            例2：将值“30AB”需要改为“300102”，(是A改为01，B改为02，而不是将AB改为0102)则为replace(replace(‘30AB’, ‘A’, ‘01’),‘B’,‘02’)

37.将titles_test表名修改为titles_2017。--SQL45
    将titles_test表名修改为titles_2017；
        修改表明的语法如下：
            alter table <原来的表名> rename to <新表名>;
        正解：
            alter table titles_test rename to titles_2017;

38.在audit表上创建外键约束，其emp_no对应employees_test表的主键id。--SQL46
    在audit表上创建外键约束，其emp_no对应employees_test表的主键id。

    创建外键的语句结构：
        ALTER TABLE <表名>
        ADD CONSTRAINT FOREIGN KEY (<列名>)
        REFERENCES <关联表>（关联列）

    语句：
        alter table audit
         add constraint foreign key(emp_no)
         references employees_test(id);

39.将所有获取奖金的员工当前的薪水增加10%。--SQL48
    请你写出更新语句，将所有获取奖金的员工当前的(salaries.to_date='9999-01-01')薪水增加10%。(emp_bonus里面的emp_no都是当前获奖的所有员工，不考虑获取的奖金的类型)。
        以上示例更新后的结果salaries为:

    update salaries as s join emp_bonus as e on s.emp_no=e.emp_no
        set salary = salary*1.1
        where to_date='9999-01-01'
    注：推荐使用join连接查询，连接查询不需要创建+销毁临时表，因此速度比子查询快。

40.将employees表中的所有员工的last_name和first_name通过引号连接起来。 --SQL50
    将employees表中的所有员工的last_name和first_name通过(')连接起来。(sqlite不支持concat，请用||实现，mysql支持concat)

    级联的函数格式：
       select concat (id, name, score) as info from tt2;

    正解：
    SELECT CONCAT(RTrim(last_name),"'",LTrim(first_name)) AS name
        FROM employees;

    去掉空格的函数：(R/L)Trim()
        RTrim():去除字符串右端空格
        LTrim():去除字符串左端空格
        Trim():去除字符串两端的空格

41.查找字符串中逗号出现的次数.--SQL51
    请你统计每个字符串中逗号出现的次数cnt。
    SELECT id, LENGTH(string) - LENGTH(REPLACE(string, ",", "")) AS cnt
        FROM strings;

42.获取employees中的first_name.---SQL52
    请你将employees中的first_name，并按照first_name最后两个字母升序进行输出。
    注：
        right(data,n) data代表数据.N代表截取的位数，其实也就是对返回的字段进行处理。

    SELECT first_name FROM employees ORDER BY RIGHT(first_name,2);

43.按照dept_no进行汇总。---SQL53
    按照dept_no进行汇总，属于同一个部门的emp_no按照逗号进行连接，结果给出dept_no以及连接出的结果employees。

    注：group_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator '分隔符'])

    解答：
        select dept_no, group_concat(emp_no) employees from dept_emp group by dept_no


44.平均工资.---SQL54
    查找排除在职(to_date = '9999-01-01' )员工的最大、最小salary之后，其他的在职员工的平均工资avg_salary。

    select (sum(salary)-max(salary)-min(salary))/(count(1)-2) avg_salary
     from salaries where to_date='9999-01-01';

    注：count(1)：代表所有数据长度；
        -2：代表减去最大最小值的两个长度；

45.分页查询employees表，每5行一页，返回第2页的数据。---SQL55
    分页查询employees表，每5行一页，返回第2页的数据；

    select * from employees
       limit 5,5

    注：limit x,y:
        y:反馈y条记录
        x：从第几条记录开始返回(第一条记录序号为0，默认为0)

46.使用含有关键字exists查找未分配具体部门的员工的所有信息。---SQL57
    select * from employees e
       where not exists (select emp_no from dept_emp d where d.emp_no=e.emp_no)

47.获取有奖金的员工相关信息。  --SQL59
    请你给出emp_no、first_name、last_name、奖金类型btype、对应的当前薪水情况salary以及奖金金额bonus。
    bonus结果保留一位小数，输出结果按emp_no升序排序。
        select e.emp_no
            ,e.first_name
            ,e.last_name
            ,b.btype
            ,s.salary
            ,(s.salary*b.btype*0.1) as bonus
        from employees e
        join salaries s on e.emp_no=s.emp_no
        join emp_bonus b on e.emp_no=b.emp_no
        where s.to_date='9999-01-01';

48.统计salary的累计和running_total.---SQL254
    按照salary的累计和running_total，其中running_total为前N个当前( to_date = '9999-01-01')员工的salary累计和，其他以此类推。
    具体结果如下Demo展示:
        SELECT s1.emp_no, s1.salary, (SELECT SUM(s2.salary) FROM salaries AS s2 WHERE s2.emp_no <= s1.emp_no AND s2.to_date = '9999-01-01') AS running_total
        FROM salaries AS s1
        WHERE s1.to_date = '9999-01-01'
        ORDER BY s1.emp_no

49.给出employees表中排名为奇数行的first_name。 ---SQL255
    请你在不打乱原序列顺序的情况下，输出：按first_name排升序后，取奇数行的first_name。










































