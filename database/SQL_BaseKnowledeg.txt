SQL 基础知识普及

(8)SELECT (9)DISTINCT  (11)<Top Num> <select list>
(1)FROM [left_table]
(3)<join_type> JOIN <right_table>
(2)        ON <join_condition>
(4)WHERE <where_condition>
(5)GROUP BY <group_by_list>
(6)WITH <CUBE | RollUP>
(7)HAVING <having_condition>
(10)ORDER BY <order_by_list>

--------------------------select -----------------------------------------start-------------------------------------
今天先来讲解SELECT的用法：
    SQL SELECT 语句
    SELECT 语句用于从表中选取数据。
    结果被存储在一个结果表中（称为结果集）。
    SQL SELECT 语法
    SELECT 列名称 FROM 表名称
    以及：
    SELECT * FROM 表名称
    注释：SQL 语句对大小写不敏感。SELECT 等效于 select。
    SQL SELECT 实例
    如需获取名为 "LastName" 和 "FirstName" 的列的内容（从名为 "Persons" 的数据库表），请使用类似这样的 SELECT


--------------------------select -----------------------------------------end---------------------------------------





--------------------------DISTINCT -----------------------------------------start-----------------------------------
    在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同（distinct）的值。
    关键词 DISTINCT 用于返回唯一不同的值。 作用就是去重；

    语法：
    SELECT DISTINCT 列名称 FROM 表名称
    使用 DISTINCT 关键词
       如果要从 "Company" 列中选取所有的值，我们需要使用 SELECT 语句：


--------------------------DISTINCT -----------------------------------------end-----------------------------------





----------------------------TOP ----------------------------------------- start-----------------------------------
    TOP 子句用于规定要返回的记录的数目。
    对于拥有数千条记录的大型表来说，TOP子句是非常有用的。
    注释：并非所有的数据库系统都支持 TOP 子句。

    SQL Server 的语法：
        SELECT TOP number|percent column_name(s) FROM table_name

    MySQL 和 Oracle 中的 SQL SELECT TOP 是等价的
    MySQL 语法
        SELECT column_name(s)
        FROM table_name
        LIMIT number
    例子
        SELECT *
        FROM Persons
        LIMIT 5


----------------------------TOP ----------------------------------------- end-------------------------------------



----------------------------WHERE -----------------------------------------start-----------------------------------
    WHERE 子句
    如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句。

    语法
    SELECT 列名称 FROM 表名称 WHERE 列 运算符 值
    下面的运算符可在 WHERE 子句中使用：
    操作符       描述
      =	        等于
     <>	        不等于
     >	        大于
     <	        小于
     >=	        大于等于
     <=	        小于等于
     BETWEEN	在某个范围内
     LIKE	    搜索某种模式
    注释：在某些版本的 SQL 中，操作符 <> 可以写为 !=。

    引号的使用
     请注意，我们在例子中的条件值周围使用的是单引号。
     SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。如果是数值，请不要使用引号。



----------------------------WHERE -----------------------------------------end-------------------------------------

----------------------------AND&OR -----------------------------------------start----------------------------------

    AND 和 OR 运算符用于基于一个以上的条件对记录进行过滤。
    AND 和 OR 运算符
    AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。
    如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。
    如果第一个条件和第二个条件中只要有一个成立，则OR运算符显示一条记录。

    AND 运算符实例
      使用 AND 来显示所有姓为 "Carter" 并且名为 "Thomas" 的人：
      SELECT * FROM Persons WHERE FirstName='Thomas' AND LastName='Carter'

    OR 运算符实例
     使用 OR 来显示所有姓为 "Carter" 或者名为 "Thomas" 的人：
     SELECT * FROM Persons WHERE firstname='Thomas' OR lastname='Carter'

    结合 AND 和 OR 运算符
       我们也可以把 AND 和 OR 结合起来（使用圆括号来组成复杂的表达式）:
       SELECT * FROM Persons WHERE (FirstName='Thomas' OR FirstName='William')AND LastName='Carter'

----------------------------AND&OR -----------------------------------------end------------------------------------


----------------------------ORDER BY ---------------------------------------start-----------------------------------

    ORDER BY 关键字用于对结果集进行排序。

    SQL ORDER BY 关键字
        ORDER BY 关键字用于按升序或降序对结果集进行排序。
        ORDER BY 关键字默认情况下按升序排序记录。
        如果需要按降序对记录进行排序，可以使用DESC关键字。

    SELECT column1, column2, ... FROM table_name
     ORDER BY column1, column2, ... ASC|DESC;

    ORDER BY 多列 实例2
      以下SQL语句从"Customers" 表中选择所有客户，按 "省份" 升序排列，并按 "姓名" 列降序排列：
      SELECT * FROM Customers
      ORDER BY 省份 ASC, 姓名 DESC;

----------------------------ORDER BY ---------------------------------------end-------------------------------------


----------------------------INSERT INTO -------------------------------------start----------------------------------

    INSERT INTO 语句用于向表中插入新记录。
    SQL INSERT INTO 语句
       INSERT INTO 语句用于向表中插入新记录。

    SQL INSERT INTO 语法
     INSERT INTO 语句可以用两种形式编写。
     第一个表单没有指定要插入数据的列的名称，只提供要插入的值：
     INSERT INTO table_name (column1, column2, column3, ...)
        VALUES (value1, value2, value3, ...);

    如果要为表中的所有列添加值，则不需要在SQL查询中指定列名称。但是，请确保值的顺序与表中的列顺序相同。INSERT INTO语法如下所示：
        INSERT INTO table_name
          VALUES (value1, value2, value3, ...);


----------------------------INSERT INTO -------------------------------------end------------------------------------

----------------------------UPDATE ----------------------------------------Start------------------------------------

    UPDATE 语句用于更新表中的现有记录。
    SQL UPDATE 语句
      UPDATE 语句用于更新表中已存在的记录。

    SQL UPDATE 语法
      UPDATE table_name SET column1 = value1,
        column2 = value2, ...
        WHERE condition;

    请注意
        更新表中的记录时要小心！
        要注意SQL UPDATE 语句中的 WHERE 子句！
        WHERE子句指定哪些记录需要更新。如果省略WHERE子句，所有记录都将更新！


----------------------------UPDATE ----------------------------------------end--------------------------------------

----------------------------DELETE ----------------------------------------start------------------------------------

    DELETE语句用于删除表中现有记录。
    SQL DELETE 语句
        DELETE 语句用于删除表中的行。

    SQL DELETE 语法
       DELETE FROM table_name WHERE condition;

    请注意
        删除表格中的记录时要小心！
        注意SQL DELETE 语句中的 WHERE 子句！
        WHERE子句指定需要删除哪些记录。如果省略了WHERE子句，表中所有记录都将被删除！

----------------------------DELETE ----------------------------------------end--------------------------------------

----------------------------LIKE运算符 ----------------------------------------start----------------------------------

    在WHERE子句中使用LIKE运算符来搜索列中的指定模式。
    SQL LIKE 操作符
        LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。
        有两个通配符与LIKE运算符一起使用：
            ％ - 百分号表示零个，一个或多个字符
            _ - 下划线表示单个字符
        注意： MS Access使用问号（?）而不是下划线（_）。
        百分号和下划线也可以组合使用！

    SQL LIKE 语法
        SELECT column1, column2, ... FROM table_name
        WHERE columnN LIKE pattern;

    提示：您还可以使用AND或OR运算符组合任意数量的条件。
      下面是一些使用'％'和'_'通配符显示不同LIKE运算符的例子：
        以下SQL语句选择客户地址以“号”结尾的所有客户：
           代码示例：
           SELECT * FROM Customers
           WHERE 地址 LIKE '%号';

        以下SQL语句选择客户地址在第三位具有"路"的所有客户：
            代码示例：
            SELECT * FROM Customers
            WHERE 地址 LIKE '__路%';



----------------------------LIKE运算符 ----------------------------------------end------------------------------------


----------------------------通配符 ------------------------------------------start------------------------------------

    通配符用于替换字符串中的任何其他字符。
    通配符与SQL LIKE运算符一起使用。在WHERE子句中使用LIKE运算符来搜索列中的指定模式。
    有两个通配符与LIKE运算符一起使用：
        ％ - 百分号表示零个，一个或多个字符
        _ - 下划线表示单个字符
    注意： MS Access使用问号（？）而不是下划线（_）。
    在MS Access和SQL Server中，你也可以使用：
        [ charlist ] - 定义要匹配的字符的集合和范围
        [^ charlist ]或[！charlist ] - 定义不匹配字符的集合和范围
    通配符也可以组合使用！

    下面是一些使用'％'和'_'通配符显示不同LIKE运算符的例子：
           LIKE运算符	             描述
        WHERE 地址 LIKE 'a%'	      查找以“a”开头的任何值
        WHERE 地址 LIKE '%a'	      查找以"a"结尾的任何值
        WHERE 地址 LIKE '%or%'	  在任何位置查找任何具有“or”的值
        WHERE 地址 LIKE '_r%'	  在第二个位置查找任何具有“r”的值
        WHERE 地址 LIKE 'a_%_%'	  查找以“a”开头并且长度至少为3个字符的值
        WHERE 地址 LIKE 'a%o'	  查找以“a”开始并以“o”结尾的任何值




----------------------------通配符 ------------------------------------------end--------------------------------------


----------------------------IN运算符 -----------------------------------------start-----------------------------------
    IN运算符允许您在WHERE子句中指定多个值。
    IN运算符是多个OR条件的简写。
    SQL IN 语法
        SELECT column_name(s) FROM table_name
        WHERE column_name IN (value1, value2, ...);


----------------------------IN运算符 -----------------------------------------end-------------------------------------

----------------------------BETWEEN运算符 ------------------------------------start-----------------------------------

    BETWEEN 操作符用于选取介于两个值之间的数据范围内的值。
    SQL BETWEEN 运算符
        BETWEEN运算符选择给定范围内的值。值可以是数字，文本或日期。
        BETWEEN运算符是包含性的：包括开始和结束值。
    SQL BETWEEN 语法
        SELECT column_name(s) FROM table_name
        WHERE column_name BETWEEN value1 AND value2;

    BETWEEN 运算符实例
      以下SQL语句选择价格在30到60之间的所有产品
         SELECT * FROM Products
         WHERE 价格 BETWEEN 30 AND 60;

    NOT BETWEEN 操作符实例
      要显示前面示例范围之外的产品，请使用NOT BETWEEN：
        SELECT * FROM Products
        WHERE 价格 NOT BETWEEN 30 AND 60;

    请注意，在不同的数据库中，BETWEEN 操作符会产生不同的结果！
        在一些数据库中，BETWEEN 选取介于两个值之间但不包括两个测试值的字段。
        在一些数据库中，BETWEEN 选取介于两个值之间且包括两个测试值的字段。
        在一些数据库中，BETWEEN 选取介于两个值之间且包括第一个测试值但不包括最后一个测试值的字段。
        因此，请检查您的数据库是如何处理 BETWEEN 操作符！

----------------------------BETWEEN运算符 ------------------------------------end-------------------------------------

----------------------------通用数据类型 ------------------------------------start-------------------------------------

    SQL 通用数据类型：
        数据类型定义了存储在列中的值的类型。

    SQL 通用数据类型
        数据库表中的每一列都需要有一个名称和数据类型。
        SQL 开发人员必须在创建SQL表时决定表中的每个列将要存储的数据的类型。
        数据类型是一个标签，是便于SQL了解每个列期望存储什么类型的数据的指南，它也标识了SQL如何与存储的数据进行交互。

    下列的表格列出了SQL中通用的数据类型：
            数据类型                 描述
        CHARACTER(n)	    字符/字符串,固定长度 n。
        VARCHAR(n)                  或
        CHARACTER VARYING(n)	字符/字符串,可变长度,最大长度 n。
        BINARY(n)	            二进制串,固定长度 n。
        BOOLEAN	                存储 TRUE 或 FALSE 值
        VARBINARY(n)                或
        BINARY VARYING(n)	    二进制串,可变长度。最大长度 n。
        INTEGER(p)	            整数值（没有小数点）。精度 p。
        SMALLINT	            整数值（没有小数点）。精度 5。
        INTEGER	                整数值（没有小数点）。精度 10。
        BIGINT	                整数值（没有小数点）。精度 19。
        DECIMAL(p,s)	        精确数值，精度 p，小数点后位数 s。例如：decimal(5,2) 是一个小数点前有 3 位数小数点后有 2 位数的数字。
        NUMERIC(p,s)	        精确数值，精度 p，小数点后位数 s。（与 DECIMAL 相同）
        FLOAT(p)	            近似数值，尾数精度 p。一个采用以 10 为基数的指数计数法的浮点数。该类型的 size 参数由一个指定最小精度的单一数字组成。
        REAL	                近似数值，尾数精度 7。
        FLOAT	                近似数值，尾数精度 16。
        DOUBLE PRECISION	    近似数值，尾数精度 16。
        DATE	                存储年、月、日的值。
        TIME	                存储小时、分、秒的值。
        TIMESTAMP	            存储年、月、日、小时、分、秒的值。
        INTERVAL	            由一些整数字段组成，代表一段时间，取决于区间的类型。
        ARRAY	                元素的固定长度的有序集合
        MULTISET	            元素的可变长度的无序集合
        XML	                    存储 XML 数据

    注释：在不同的数据库中，相同的数据类型可能有不同的名称。即使名字相同，大小和其他细节也可能不同！请随时检查文件!

    以上是比较全的数据类型，SQL server一般常用的数据类型就几种int(整数类型)， varchar(可变长字符类型)，char(固定长度字符类型)，datetime(日期类型)，
    time(时间类型)。这些数据类型是在建表的时候就会用到，其他一些定义参数时也会使用到。

----------------------------通用数据类型 ------------------------------------end---------------------------------------

----------------------------语句快速参考 ------------------------------------start-------------------------------------
    AND / OR  并且/或
        SELECT column_name(s)
        FROM table_name
        WHERE condition
        AND|OR condition

    ALTER TABLE  修改表
        ALTER TABLE table_name
        ADD column_name datatype
        or
        ALTER TABLE table_name
        DROP COLUMN column_name

    AS (alias)  重命名
        SELECT column_name AS column_alias
        FROM table_name
        or
        SELECT column_name
        FROM table_name AS table_alias

    BETWEEN...AND...  在某个区间
        SELECT column_name(s)
        FROM table_name
        WHERE column_name
        BETWEEN value1 AND value2

    CREATE DATABASE   创建数据库
        CREATE DATABASE database_name

    CREATE TABLE  创建表
        CREATE TABLE table_name
        (
        column_name1 data_type,
        column_name2 data_type,
        column_name2 data_type,
        ...
        )

    CREATE INDEX  创建索引
        CREATE INDEX index_name
        ON table_name (column_name)
        or
        CREATE UNIQUE INDEX index_name
        ON table_name (column_name)

    CREATE VIEW   创建视图
        CREATE VIEW view_name AS
        SELECT column_name(s)
        FROM table_name
        WHERE condition

    DELETE  删除
        DELETE FROM table_name
        WHERE some_column=some_value
        or
        DELETE FROM table_name
        (Note: Deletes the entire table!!)
        DELETE * FROM table_name
        (Note: Deletes the entire table!!)

    DROP DATABASE  删除数据库
        DROP DATABASE database_name

    DROP INDEX  删除索引
        DROP INDEX table_name.index_name (SQL Server)
        DROP INDEX index_name ON table_name (MS Access)
        DROP INDEX index_name (DB2/Oracle)
        ALTER TABLE table_name
        DROP INDEX index_name (MySQL)

    DROP TABLE  删除表
        DROP TABLE table_name

    GROUP BY 分组
        SELECT column_name, aggregate_function(column_name)
        FROM table_name
        WHERE column_name operator value
        GROUP BY column_name

    HAVING  分组过滤条件
        SELECT column_name, aggregate_function(column_name)
        FROM table_name
        WHERE column_name operator value
        GROUP BY column_name
        HAVING aggregate_function(column_name) operator value

    IN  在某些固定值中查找
        SELECT column_name(s)
        FROM table_name
        WHERE column_name
        IN (value1,value2,..)



----------------------------语句快速参考 ------------------------------------end---------------------------------------


































































