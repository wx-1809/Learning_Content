SQL 基础知识普及

(8)SELECT (9)DISTINCT  (11)<Top Num> <select list>
(1)FROM [left_table]
(3)<join_type> JOIN <right_table>
(2)        ON <join_condition>
(4)WHERE <where_condition>
(5)GROUP BY <group_by_list>
(6)WITH <CUBE | RollUP>
(7)HAVING <having_condition>
(10)ORDER BY <order_by_list>

--------------------------select -----------------------------------------start-------------------------------------
今天先来讲解SELECT的用法：
    SQL SELECT 语句
    SELECT 语句用于从表中选取数据。
    结果被存储在一个结果表中（称为结果集）。
    SQL SELECT 语法
    SELECT 列名称 FROM 表名称
    以及：
    SELECT * FROM 表名称
    注释：SQL 语句对大小写不敏感。SELECT 等效于 select。
    SQL SELECT 实例
    如需获取名为 "LastName" 和 "FirstName" 的列的内容（从名为 "Persons" 的数据库表），请使用类似这样的 SELECT


--------------------------select -----------------------------------------end---------------------------------------





--------------------------DISTINCT -----------------------------------------start-----------------------------------
    在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同（distinct）的值。
    关键词 DISTINCT 用于返回唯一不同的值。 作用就是去重；

    语法：
    SELECT DISTINCT 列名称 FROM 表名称
    使用 DISTINCT 关键词
       如果要从 "Company" 列中选取所有的值，我们需要使用 SELECT 语句：


--------------------------DISTINCT -----------------------------------------end-----------------------------------





----------------------------TOP ----------------------------------------- start-----------------------------------
    TOP 子句用于规定要返回的记录的数目。
    对于拥有数千条记录的大型表来说，TOP子句是非常有用的。
    注释：并非所有的数据库系统都支持 TOP 子句。

    SQL Server 的语法：
        SELECT TOP number|percent column_name(s) FROM table_name

    MySQL 和 Oracle 中的 SQL SELECT TOP 是等价的
    MySQL 语法
        SELECT column_name(s)
        FROM table_name
        LIMIT number
    例子
        SELECT *
        FROM Persons
        LIMIT 5


----------------------------TOP ----------------------------------------- end-------------------------------------



----------------------------WHERE -----------------------------------------start-----------------------------------
    WHERE 子句
    如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句。

    语法
    SELECT 列名称 FROM 表名称 WHERE 列 运算符 值
    下面的运算符可在 WHERE 子句中使用：
    操作符       描述
      =	        等于
     <>	        不等于
     >	        大于
     <	        小于
     >=	        大于等于
     <=	        小于等于
     BETWEEN	在某个范围内
     LIKE	    搜索某种模式
    注释：在某些版本的 SQL 中，操作符 <> 可以写为 !=。

    引号的使用
     请注意，我们在例子中的条件值周围使用的是单引号。
     SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。如果是数值，请不要使用引号。



----------------------------WHERE -----------------------------------------end-------------------------------------

----------------------------AND&OR -----------------------------------------start----------------------------------

    AND 和 OR 运算符用于基于一个以上的条件对记录进行过滤。
    AND 和 OR 运算符
    AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。
    如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。
    如果第一个条件和第二个条件中只要有一个成立，则OR运算符显示一条记录。

    AND 运算符实例
      使用 AND 来显示所有姓为 "Carter" 并且名为 "Thomas" 的人：
      SELECT * FROM Persons WHERE FirstName='Thomas' AND LastName='Carter'

    OR 运算符实例
     使用 OR 来显示所有姓为 "Carter" 或者名为 "Thomas" 的人：
     SELECT * FROM Persons WHERE firstname='Thomas' OR lastname='Carter'

    结合 AND 和 OR 运算符
       我们也可以把 AND 和 OR 结合起来（使用圆括号来组成复杂的表达式）:
       SELECT * FROM Persons WHERE (FirstName='Thomas' OR FirstName='William')AND LastName='Carter'

----------------------------AND&OR -----------------------------------------end------------------------------------


----------------------------ORDER BY ---------------------------------------start-----------------------------------

    ORDER BY 关键字用于对结果集进行排序。

    SQL ORDER BY 关键字
        ORDER BY 关键字用于按升序或降序对结果集进行排序。
        ORDER BY 关键字默认情况下按升序排序记录。
        如果需要按降序对记录进行排序，可以使用DESC关键字。

    SELECT column1, column2, ... FROM table_name
     ORDER BY column1, column2, ... ASC|DESC;

    ORDER BY 多列 实例2
      以下SQL语句从"Customers" 表中选择所有客户，按 "省份" 升序排列，并按 "姓名" 列降序排列：
      SELECT * FROM Customers
      ORDER BY 省份 ASC, 姓名 DESC;

----------------------------ORDER BY ---------------------------------------end-------------------------------------


----------------------------INSERT INTO -------------------------------------start----------------------------------

    INSERT INTO 语句用于向表中插入新记录。
    SQL INSERT INTO 语句
       INSERT INTO 语句用于向表中插入新记录。

    SQL INSERT INTO 语法
     INSERT INTO 语句可以用两种形式编写。
     第一个表单没有指定要插入数据的列的名称，只提供要插入的值：
     INSERT INTO table_name (column1, column2, column3, ...)
        VALUES (value1, value2, value3, ...);

    如果要为表中的所有列添加值，则不需要在SQL查询中指定列名称。但是，请确保值的顺序与表中的列顺序相同。INSERT INTO语法如下所示：
        INSERT INTO table_name
          VALUES (value1, value2, value3, ...);


----------------------------INSERT INTO -------------------------------------end------------------------------------

----------------------------UPDATE ----------------------------------------Start------------------------------------

    UPDATE 语句用于更新表中的现有记录。
    SQL UPDATE 语句
      UPDATE 语句用于更新表中已存在的记录。

    SQL UPDATE 语法
      UPDATE table_name SET column1 = value1,
        column2 = value2, ...
        WHERE condition;

    请注意
        更新表中的记录时要小心！
        要注意SQL UPDATE 语句中的 WHERE 子句！
        WHERE子句指定哪些记录需要更新。如果省略WHERE子句，所有记录都将更新！


----------------------------UPDATE ----------------------------------------end--------------------------------------

----------------------------DELETE ----------------------------------------start------------------------------------

    DELETE语句用于删除表中现有记录。
    SQL DELETE 语句
        DELETE 语句用于删除表中的行。

    SQL DELETE 语法
       DELETE FROM table_name WHERE condition;

    请注意
        删除表格中的记录时要小心！
        注意SQL DELETE 语句中的 WHERE 子句！
        WHERE子句指定需要删除哪些记录。如果省略了WHERE子句，表中所有记录都将被删除！

----------------------------DELETE ----------------------------------------end--------------------------------------

----------------------------LIKE运算符 ----------------------------------------start----------------------------------

    在WHERE子句中使用LIKE运算符来搜索列中的指定模式。
    SQL LIKE 操作符
        LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。
        有两个通配符与LIKE运算符一起使用：
            ％ - 百分号表示零个，一个或多个字符
            _ - 下划线表示单个字符
        注意： MS Access使用问号（?）而不是下划线（_）。
        百分号和下划线也可以组合使用！

    SQL LIKE 语法
        SELECT column1, column2, ... FROM table_name
        WHERE columnN LIKE pattern;

    提示：您还可以使用AND或OR运算符组合任意数量的条件。
      下面是一些使用'％'和'_'通配符显示不同LIKE运算符的例子：
        以下SQL语句选择客户地址以“号”结尾的所有客户：
           代码示例：
           SELECT * FROM Customers
           WHERE 地址 LIKE '%号';

        以下SQL语句选择客户地址在第三位具有"路"的所有客户：
            代码示例：
            SELECT * FROM Customers
            WHERE 地址 LIKE '__路%';



----------------------------LIKE运算符 ----------------------------------------end------------------------------------


----------------------------通配符 ------------------------------------------start------------------------------------

    通配符用于替换字符串中的任何其他字符。
    通配符与SQL LIKE运算符一起使用。在WHERE子句中使用LIKE运算符来搜索列中的指定模式。
    有两个通配符与LIKE运算符一起使用：
        ％ - 百分号表示零个，一个或多个字符
        _ - 下划线表示单个字符
    注意： MS Access使用问号（？）而不是下划线（_）。
    在MS Access和SQL Server中，你也可以使用：
        [ charlist ] - 定义要匹配的字符的集合和范围
        [^ charlist ]或[！charlist ] - 定义不匹配字符的集合和范围
    通配符也可以组合使用！

    下面是一些使用'％'和'_'通配符显示不同LIKE运算符的例子：
           LIKE运算符	             描述
        WHERE 地址 LIKE 'a%'	      查找以“a”开头的任何值
        WHERE 地址 LIKE '%a'	      查找以"a"结尾的任何值
        WHERE 地址 LIKE '%or%'	  在任何位置查找任何具有“or”的值
        WHERE 地址 LIKE '_r%'	  在第二个位置查找任何具有“r”的值
        WHERE 地址 LIKE 'a_%_%'	  查找以“a”开头并且长度至少为3个字符的值
        WHERE 地址 LIKE 'a%o'	  查找以“a”开始并以“o”结尾的任何值




----------------------------通配符 ------------------------------------------end--------------------------------------


----------------------------IN运算符 -----------------------------------------start-----------------------------------
    IN运算符允许您在WHERE子句中指定多个值。
    IN运算符是多个OR条件的简写。
    SQL IN 语法
        SELECT column_name(s) FROM table_name
        WHERE column_name IN (value1, value2, ...);


----------------------------IN运算符 -----------------------------------------end-------------------------------------

----------------------------BETWEEN运算符 ------------------------------------start-----------------------------------

    BETWEEN 操作符用于选取介于两个值之间的数据范围内的值。
    SQL BETWEEN 运算符
        BETWEEN运算符选择给定范围内的值。值可以是数字，文本或日期。
        BETWEEN运算符是包含性的：包括开始和结束值。
    SQL BETWEEN 语法
        SELECT column_name(s) FROM table_name
        WHERE column_name BETWEEN value1 AND value2;

    BETWEEN 运算符实例
      以下SQL语句选择价格在30到60之间的所有产品
         SELECT * FROM Products
         WHERE 价格 BETWEEN 30 AND 60;

    NOT BETWEEN 操作符实例
      要显示前面示例范围之外的产品，请使用NOT BETWEEN：
        SELECT * FROM Products
        WHERE 价格 NOT BETWEEN 30 AND 60;

    请注意，在不同的数据库中，BETWEEN 操作符会产生不同的结果！
        在一些数据库中，BETWEEN 选取介于两个值之间但不包括两个测试值的字段。
        在一些数据库中，BETWEEN 选取介于两个值之间且包括两个测试值的字段。
        在一些数据库中，BETWEEN 选取介于两个值之间且包括第一个测试值但不包括最后一个测试值的字段。
        因此，请检查您的数据库是如何处理 BETWEEN 操作符！

----------------------------BETWEEN运算符 ------------------------------------end-------------------------------------

----------------------------通用数据类型 ------------------------------------start-------------------------------------

    SQL 通用数据类型：
        数据类型定义了存储在列中的值的类型。

    SQL 通用数据类型
        数据库表中的每一列都需要有一个名称和数据类型。
        SQL 开发人员必须在创建SQL表时决定表中的每个列将要存储的数据的类型。
        数据类型是一个标签，是便于SQL了解每个列期望存储什么类型的数据的指南，它也标识了SQL如何与存储的数据进行交互。

    下列的表格列出了SQL中通用的数据类型：
            数据类型                 描述
        CHARACTER(n)	    字符/字符串,固定长度 n。
        VARCHAR(n)                  或
        CHARACTER VARYING(n)	字符/字符串,可变长度,最大长度 n。
        BINARY(n)	            二进制串,固定长度 n。
        BOOLEAN	                存储 TRUE 或 FALSE 值
        VARBINARY(n)                或
        BINARY VARYING(n)	    二进制串,可变长度。最大长度 n。
        INTEGER(p)	            整数值（没有小数点）。精度 p。
        SMALLINT	            整数值（没有小数点）。精度 5。
        INTEGER	                整数值（没有小数点）。精度 10。
        BIGINT	                整数值（没有小数点）。精度 19。
        DECIMAL(p,s)	        精确数值，精度 p，小数点后位数 s。例如：decimal(5,2) 是一个小数点前有 3 位数小数点后有 2 位数的数字。
        NUMERIC(p,s)	        精确数值，精度 p，小数点后位数 s。（与 DECIMAL 相同）
        FLOAT(p)	            近似数值，尾数精度 p。一个采用以 10 为基数的指数计数法的浮点数。该类型的 size 参数由一个指定最小精度的单一数字组成。
        REAL	                近似数值，尾数精度 7。
        FLOAT	                近似数值，尾数精度 16。
        DOUBLE PRECISION	    近似数值，尾数精度 16。
        DATE	                存储年、月、日的值。
        TIME	                存储小时、分、秒的值。
        TIMESTAMP	            存储年、月、日、小时、分、秒的值。
        INTERVAL	            由一些整数字段组成，代表一段时间，取决于区间的类型。
        ARRAY	                元素的固定长度的有序集合
        MULTISET	            元素的可变长度的无序集合
        XML	                    存储 XML 数据

    注释：在不同的数据库中，相同的数据类型可能有不同的名称。即使名字相同，大小和其他细节也可能不同！请随时检查文件!

    以上是比较全的数据类型，SQL server一般常用的数据类型就几种int(整数类型)， varchar(可变长字符类型)，char(固定长度字符类型)，datetime(日期类型)，
    time(时间类型)。这些数据类型是在建表的时候就会用到，其他一些定义参数时也会使用到。

----------------------------通用数据类型 ------------------------------------end---------------------------------------

----------------------------语句快速参考 ------------------------------------start-------------------------------------
    AND / OR  并且/或
        SELECT column_name(s)
        FROM table_name
        WHERE condition
        AND|OR condition

    ALTER TABLE  修改表
        ALTER TABLE table_name
        ADD column_name datatype
        or
        ALTER TABLE table_name
        DROP COLUMN column_name

    AS (alias)  重命名
        SELECT column_name AS column_alias
        FROM table_name
        or
        SELECT column_name
        FROM table_name AS table_alias

    BETWEEN...AND...  在某个区间
        SELECT column_name(s)
        FROM table_name
        WHERE column_name
        BETWEEN value1 AND value2

    CREATE DATABASE   创建数据库
        CREATE DATABASE database_name

    CREATE TABLE  创建表
        CREATE TABLE table_name
        (
        column_name1 data_type,
        column_name2 data_type,
        column_name2 data_type,
        ...
        )

    CREATE INDEX  创建索引
        CREATE INDEX index_name
        ON table_name (column_name)
        or
        CREATE UNIQUE INDEX index_name
        ON table_name (column_name)

    CREATE VIEW   创建视图
        CREATE VIEW view_name AS
        SELECT column_name(s)
        FROM table_name
        WHERE condition

    DELETE  删除
        DELETE FROM table_name
        WHERE some_column=some_value
        or
        DELETE FROM table_name
        (Note: Deletes the entire table!!)
        DELETE * FROM table_name
        (Note: Deletes the entire table!!)

    DROP DATABASE  删除数据库
        DROP DATABASE database_name

    DROP INDEX  删除索引
        DROP INDEX table_name.index_name (SQL Server)
        DROP INDEX index_name ON table_name (MS Access)
        DROP INDEX index_name (DB2/Oracle)
        ALTER TABLE table_name
        DROP INDEX index_name (MySQL)

    DROP TABLE  删除表
        DROP TABLE table_name

    GROUP BY 分组
        SELECT column_name, aggregate_function(column_name)
        FROM table_name
        WHERE column_name operator value
        GROUP BY column_name

    HAVING  分组过滤条件
        SELECT column_name, aggregate_function(column_name)
        FROM table_name
        WHERE column_name operator value
        GROUP BY column_name
        HAVING aggregate_function(column_name) operator value

    IN  在某些固定值中查找
        SELECT column_name(s)
        FROM table_name
        WHERE column_name
        IN (value1,value2,..)

    INSERT INTO  插入表
        INSERT INTO table_name
        VALUES (value1, value2, value3,....)
        or
        INSERT INTO table_name
        (column1, column2, column3,...)
        VALUES (value1, value2, value3,....)

    INNER JOIN  内连接
        SELECT column_name(s)
        FROM table_name1
        INNER JOIN table_name2
        ON table_name1.column_name=table_name2.column_name

    LEFT JOIN  左连接
        SELECT column_name(s)
        FROM table_name1
        LEFT JOIN table_name2
        ON table_name1.column_name=table_name2.column_name

    RIGHT JOIN  右连接
        SELECT column_name(s)
        FROM table_name1
        RIGHT JOIN table_name2
        ON table_name1.column_name=table_name2.column_name

    FULL JOIN  全连接
        SELECT column_name(s)
        FROM table_name1
        FULL JOIN table_name2
        ON table_name1.column_name=table_name2.column_name

    LIKE  模糊匹配
        SELECT column_name(s)
        FROM table_name
        WHERE column_nameLIKE pattern

    ORDER BY  排序
        SELECT column_name(s)
            FROM table_name
            ORDER BY column_name [ASC|DESC]

    SELECT  查找
         SELECT column_name(s)
            FROM table_name

    SELECT *  查找表的所有字段
         SELECT *
            FROM table_name

    SELECT DISTINCT  查找去除重复的列
          SELECT DISTINCT column_name(s)
            FROM table_name

    SELECT INTO  查询结果插入表
          SELECT *
            INTO new_table_name [IN externaldatabase]
            FROM old_table_name
            or
            SELECT column_name(s)
            INTO new_table_name [IN externaldatabase]
            FROM old_table_name

    SELECT TOP  查询前N条记录
        SELECT TOP number|percent column_name(s)
            FROM table_name

    TRUNCATE TABLE  清空表
        TRUNCATE TABLE table_name

    UNION  去重并集
        SELECT column_name(s) FROM table_name1
        UNION
        SELECT column_name(s) FROM table_name2

    UNION ALL  不去重并集
        SELECT column_name(s) FROM table_name1
        UNION ALL
        SELECT column_name(s) FROM table_name2

    UPDATE  更新
        UPDATE table_name
            SET column1=value, column2=value,...
            WHERE some_column=some_value

    WHERE   条件过滤
        SELECT column_name(s)
            FROM table_name
            WHERE column_name operator value



----------------------------语句快速参考 ------------------------------------end---------------------------------------


----------------------------Join连接 ------------------------------------start---------------------------------------

    SQL 连接（Joins）
    SQL join 用于把来自两个或多个表的行结合起来。
    SQL JOIN 子句用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。
    最常见的 JOIN 类型：SQL INNER JOIN（简单的 JOIN）。 SQL INNER JOIN 从多个表中返回满足 JOIN 条件的所有行。
    不同的 SQL JOIN
    在我们继续讲解实例之前，我们先列出您可以使用的不同的 SQL JOIN 类型：
        INNER JOIN：如果表中有至少一个匹配，则返回行
        LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行
        RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行
        FULL JOIN：只要其中一个表中存在匹配，则返回行

    INNER JOIN
        内部链接INNER JOIN关键字选择两个表中具有匹配值的记录。
    SQL INNER JOIN 语法
        SELECT column_name(s)FROM table1
        INNER JOIN table2 ON
        table1.column_name = table2.column_name;
      注释：INNER JOIN 与 JOIN 是相同的。

    LEFT JOIN
       SQL左链接LEFT JOIN关键字返回左表（表1）中的所有行，即使在右表（表2）中没有匹配。如果在正确的表中没有匹配，结果是NULL。
    SQL LEFT JOIN 语法
        SELECT column_name(s)
        FROM table1
        LEFT JOIN table2
        ON table1.column_name=table2.column_name;
      注释：在一些数据库中，LEFT JOIN称为LEFT OUT ER JOIN.

    RIGHT JOIN
       SQL右链接 RIGHT JOIN 关键字返回右表（table2）的所有行，即使在左表（table1）上没有匹配。如果左表没有匹配，则结果为NULL。
    SQL RIGHT JOIN 语法
        SELECT column_name(s) FROM table1
        RIGHT JOIN table2 ON
        table1.column_name = table2.column_name;
       注释：在一些数据库中，RIGHT JOIN 称为 RIGHT OUTER JOIN。

    FULL OUTER JOIN
         当左（表1）或右（表2）表记录匹配时，FULL OUTER JOIN关键字将返回所有记录。
    注意： FULL OUTER JOIN可能会返回非常大的结果集！


----------------------------Join连接 ------------------------------------end-----------------------------------------

----------------------------UNION 运算符 ---------------------------------start--------------------------------------

    UNION运算符用于组合两个或更多SELECT语句的结果集。
    SQL UNION 运算符
        ·UNION中的每个SELECT语句必须具有相同的列数
        ·这些列也必须具有相似的数据类型
        ·每个SELECT语句中的列也必须以相同的顺序排列

    SQL UNION 语法
        SELECT column_name(s) FROM table1
        UNION
        SELECT column_name(s) FROM table2;
      注释：默认情况下，UNION 运算符选择一个不同的值。如果允许重复值，请使用 UNION ALL。

    SQL UNION ALL 语法
        SELECT column_name(s) FROM table1
        UNION ALL
        SELECT column_name(s) FROM table2;
      注释：UNION结果集中的列名总是等于UNION中第一个SELECT语句中的列名。




----------------------------UNION 运算符 ------------------------------------end--------------------------------------



---------------------------SELECT INTO和INSERT INTO SELECT 语句 -------------------------start------------------------
    SQL SELECT INTO 语句
        使用 SQL，您可以将信息从一个表中复制到另一个表中。
        SELECT INTO 语句从一个表中复制数据，然后将数据插入到另一个新表中。

    SQL SELECT INTO 语法
        SELECT *
        INTO newtable [IN externaldb]
        FROM table1;
        提示：将使用SELECT语句中定义的列名和类型创建新表。您可以使用AS子句来应用一个新名称。

    复制多个表中的数据插入到新表中：
        SELECT Customers.CustomerName, Orders.OrderID
        INTO CustomersOrderBackup2013
        FROM Customers
        LEFT JOIN Orders
        ON Customers.CustomerID=Orders.CustomerID;

    提示：SELECT INTO 语句可以用于在另一种模式下创建一个新的空表。只需添加WHERE子句，使查询返回时没有数据：
     SELECT *
        INTO newtable
        FROM table1
        WHERE 1=0;

    SQL INSERT INTO SELECT 语句
        INSERT INTO SELECT 语句从表中复制数据，并将数据插入现有的表中。目标表中的任何现有行都不会受到影响。



---------------------------SELECT INTO和INSERT INTO SELECT 语句 -------------------------end--------------------------


---------------------------删除索引、表以及数据库 -------------------------start-----------------------------------------

    SQL 撤销索引、撤销表以及撤销数据库
        通过使用 DROP 语句，可以轻松地删除索引、表和数据库。

    DROP INDEX 语句
        DROP INDEX 语句用于删除表中的索引。

    用于 MS Access 的 DROP INDEX 语法：
        DROP INDEX index_name ON table_name

    用于 MS SQL Server 的 DROP INDEX 语法：
        DROP INDEX table_name.index_name

    用于 DB2/Oracle 的 DROP INDEX 语法：
        DROP INDEX index_name

    用于 MySQL 的 DROP INDEX 语法：
        ALTER TABLE table_name DROP INDEX index_name

    DROP TABLE 语句
       DROP TABLE 语句用于删除表。
        DROP TABLE table_name

    DROP DATABASE 语句
       DROP DATABASE 语句用于删除数据库。
        DROP DATABASE database_name

    TRUNCATE TABLE 语句
        如果我们只需要删除表中的数据，而不删除表本身，那么我们该怎么做？
      使用TRUNCATE TABLE语句：
        TRUNCATE TABLE table_name

---------------------------删除索引、表以及数据库 -------------------------end-------------------------------------------


---------------------------CREATE和ALTER ----------------------------start-------------------------------------------
    1.CREATE DATABASE
        CREATE DATABASE 语句用于创建数据库。
        SQL CREATE DATABASE 语法
         CREATE DATABASE dbname;
        数据库表可以通过 CREATE TABLE 语句来添加。

    2.CREATE TABLE
        CREATE TABLE 语句用于创建数据库中的表。
         表由行和列组成，每个表都必须有个表名。
         SQL CREATE TABLE 语法
            CREATE TABLE table_name
                (
                column_name1 data_type(size),
                column_name2 data_type(size),
                column_name3 data_type(size),
                ....
                );
            column_name 参数规定表中列的名称。
            data_type 参数规定列的数据类型（例如 varchar、integer、decimal、date 等等）。
            size 参数规定表中列的最大长度。

    3.ALTER TABLE
         ALTER TABLE 语句用于在现有表中添加、删除或修改列。
           SQL ALTER TABLE 语法
            若要向表中添加列，请使用以下语法：
              ALTER TABLE table_name
                ADD column_name datatype




---------------------------CREATE和ALTER ------------------------------end-------------------------------------------

---------------------------AUTO INCREMENT 字段 ------------------------------start------------------------------------

    Auto-increment 会在新记录插入表中时生成一个唯一的数字。
    AUTO INCREMENT 字段
      我们通常希望在每次插入新记录时自动创建主键字段的值。
      我们可以在表中创建一个自动增量（auto-increment）字段。

    以下SQL语句将 "Persons" 表中的“ID”列定义为自动递增（auto-increment）主键字段：
      CREATE TABLE Persons
        (
        ID int NOT NULL AUTO_INCREMENT,
        姓名 varchar(255) NOT NULL,
        地址 varchar(255),
        城市 varchar(255),
        省份 varchar(255),
        PRIMARY KEY (ID)
        )
      MySQL使用AUTO_INREMENT关键字来执行自动增量（ auto-increment ）任务。
      默认情况下，AUTO_INREMENT的起始值为1，每个新记录增加1。
      若要以其他值开始AUTO_INREMENT序列，请使用以下SQL语法：
        ALTER TABLE Persons AUTO_INCREMENT=100



---------------------------AUTO INCREMENT 字段 ------------------------------end--------------------------------------


---------------------------VIEW视图 ------------------------------start-----------------------------------------------

    视图是可视化的表。
    本章讲解如何创建、更新和删除视图。
    SQL CREATE VIEW 语句
        在 SQL 中，视图是基于 SQL 语句的结果集的可视化表。
        视图包含行和列，就像真正的表一样。视图中的字段是一个或多个数据库中真实表中的字段。
        您可以添加 SQL 函数，在哪里添加，并将语句连接到视图，或者您可以呈现数据，就像数据来自单个表一样。

    SQL CREATE VIEW 语法
        CREATE VIEW view_name AS
        SELECT column_name(s)
        FROM table_name
        WHERE condition
    注释：视图总是显示最新数据！每当用户查询视图时，数据库引擎就使用视图的 SQL 语句重新构建数据。

    SQL CREATE VIEW 实例
        "Current Product List"(当前产品列表)视图从"Products"表中列出了所有正在使用的产品（未停产的产品）。这个视图使用下面的 SQL 创建：
          CREATE VIEW [Current Product List] AS
            SELECT 产品ID,产品名称
            FROM Products
            WHERE 折扣=No

    SQL 更新视图
        您可以使用下面的语法来更新视图：
        SQL CREATE OR REPLACE VIEW 语法
           CREATE OR REPLACE VIEW view_name AS
            SELECT column_name(s)
            FROM table_name
            WHERE condition

    SQL 删除视图
    您可以通过 DROP VIEW 命令来删除视图。
     SQL DROP VIEW 语法
        DROP VIEW view_name

---------------------------VIEW视图 ------------------------------end-------------------------------------------------


--------------------------IS NULL 和 IS NOT NULL ------------------------------start----------------------------------

    NULL 空值代表丢失的未知数据。
    默认情况下，表列可以保存 NULL 值。
    本章解释 IS NULL 和 IS NOT NULL 操作符。

    SQL NULL 值
     如果表中的列是可选的，那么我们可以插入一个新记录或更新一个现有记录，而无需向列添加一个值。这意味着该字段将存储为 NULL。
     NULL 值的处理与其他值不同。
     NULL 为未知或不适当值的占位符。
     注释：无法比较 NULL 和 0；它们是不等价的。


--------------------------IS NULL 和 IS NOT NULL ------------------------------end------------------------------------




################################################# SQL 进阶知识篇  ######################################################


--------------------------------Aliases 别名 ------------------------------start---------------------------------------

    通过使用 SQL，可以为表名称或列名称指定别名（Alias）。
    SQL 别名（Aliases）
        SQL 别名用于为表或表中的列提供临时名称。
        SQL 别名通常用于使列名更具可读性。
        SQL 一个别名只存在于查询期间。

     SELECT column_name AS alias_name
        FROM table_name;

    在下列情况下使用别名是有用的：
        查询涉及多个表
        用于查询函数
        需要把两个或更多的列放在一起
        列名长或可读性差



--------------------------------Aliases 别名 ------------------------------end-----------------------------------------

----------------------------------------约束 ------------------------------start---------------------------------------

    SQL约束用于指定表中数据的规则。
    SQL 约束
    约束是作用于数据表中列上的规则，用于限制表中数据的类型。约束的存在保证了数据库中数据的精确性和可靠性。
    约束有列级和表级之分，列级约束作用于单一的列，而表级约束作用于整张数据表。
    下面是 SQL 中常用的约束，这些约束虽然已经在关系型数据库管理系统一章中讨论过了，但是仍然值得在这里回顾一遍。
        NOT NULL 约束：保证列中数据不能有 NULL 值
        DEFAULT 约束：提供该列数据未指定时所采用的默认值
        UNIQUE 约束：保证列中的所有数据各不相同
        主键约束：唯一标识数据表中的行/记录
        外键约束：唯一标识其他表中的一条行/记录
        CHECK 约束：此约束保证列中的所有值满足某一条件
        索引：用于在数据库中快速创建或检索数据
    约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。

    SQL创建约束
     当使用CREATE TABLE语句创建表时，或者在使用ALTER TABLE语句创建表之后，可以指定约束。
     语法
      CREATE TABLE table_name (
        column1 datatype constraint,
        column2 datatype constraint,
        column3 datatype constraint,
        .... );

    SQL CREATE TABLE + CONSTRAINT 语法
        CREATE TABLE table_name
            (
            column_name1 data_type(size) constraint_name,
            column_name2 data_type(size) constraint_name,
            column_name3 data_type(size) constraint_name,
            ....
            );

    删除约束
     任何现有约束都可以通过在 ALTER TABLE 命令中指定 DROP CONSTRAINT 选项的方法删除掉。
      例如，要去除 EMPLOYEES 表中的主键约束，可以使用下述命令：
        ALTER TABLE EMPLOYEES DROP CONSTRAINT EMPLOYEES_PK;

    一些数据库实现可能提供了删除特定约束的快捷方法。例如，要在 Oracle 中删除一张表的主键约束，可以使用如下命令：
       ALTER TABLE EMPLOYEES DROP PRIMARY KEY;

    某些数据库实现允许禁用约束。这样与其从数据库中永久删除约束，你可以只是临时禁用掉它，过一段时间后再重新启用。

    完整性约束
        完整性约束用于保证关系型数据库中数据的精确性和一致性。对于关系型数据库来说，数据完整性由参照完整性（referential integrity，RI）来保证。
        有很多种约束可以起到参照完整性的作用，这些约束包括主键约束（Primary Key）、外键约束（Foreign Key）、唯一性约束（Unique Constraint）以及上面提到的其他约束。




----------------------------------------约束 ------------------------------end-----------------------------------------

----------------------------------------约束 ------------------------------start---------------------------------------

    1.NOT NULL约束
    NOT NULL 约束强制列不接受 NULL 值。
    NOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插入新记录或者更新记录。



----------------------------------------约束 ------------------------------end-----------------------------------------










################################################# SQL 进阶知识篇  ######################################################








































































