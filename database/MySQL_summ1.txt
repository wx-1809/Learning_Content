最常用的MySQL面试题集合
除了基础题部分，小编收集整理的mysql面试题还包括如下知识点或题型：
    1.MySQL高性能索引
    2.SQL语句
    3.MySQL查询优化
    4.MySQL高扩展高可用
    5.MySQL安全性

问题1：char、varchar的区别是什么？
    varchar是变长而char的长度是固定的。如果你的内容是固定大小的，你会得到更好的性能。

问题2：truncate和delete的区别是什么？
    delete命令从一个表中删除某一行，或多行；
    truncate命令永久地从表中删除每一行。

问题3：什么是触发器，mysql中有哪些触发器？
    触发器是指一段代码，当触发某个事件时，自动执行这些代码。在MySQL数据库中有如下六种触发器：
        1.before insert
        2.after insert
        3.before update
        4.after update
        5.before delete
        6.after delete

问题4：float和double的区别是什么？
    float类型数据可以存储至多8位十进制数，并在内存中占4字节。
    double类型数据可以存储至多18位十进制数，并在内存中占8字节。

问题5：如何在MySQL中获取当前日期？
    select current_date();

问题6：如何查询第n高的工资？
    select distinct(salary) from employee order by salary desc limit n-1,1;

问题7：请写出下面MySQL数据类型表达的意义(int(0),char(16),varchar(16)、datetime、text)
    知识点分析：
        此题考察的是MySQL数据类型。MySQL数据类型属于MySQL数据库基础，由此延伸出的知识点还包括如下内容：
            MySQL基础操作
            MySQL存储引擎
            MySQL锁机制
            MySQL事务处理、存储过程、触发器

    数据类型考点：
      1.整数类型：包括Tinyint，SMALLINT，MDEIEMINT，INT，DEGINT，分别表示1字节、2字节、3字节、4字节、8字节整数。任何证书类型都可以加上UNSIGNED属性，表示数据是无符号的，即非负整数。
       长度：整数类型可以被指定长度，例如：INT(11)表示长度为11的INT类型，长度在大多数场景是没有意义的，它不会限制值的合法范围，只会影响显示字符的个数，而且需要和unsigned Zerofill属性配合使用才有意义。
       例子：假定类型设定为INT(5),属性为Unsigned Zerofill，如果用户插入的数据为12的话，那么数据库实际存储数据为00012.
      2.实数类型：包括float，double，decimal。
       decimal可以用于存储比bigint还大的整数，能存储精确的小数。
       而float和double是由取值范围的，并支持使用标准的浮点进行近似计算。
       计算时float和double相比decimal效率更高一些，decimal可以理解成是用字符串进行处理。
      3.字符串类型：包括varchar，char，text，blob
       varchar用于存储可变常字符串，它比定长类型更节省空间。
       varchar使用额外1或2字节存储字符串长度。列长度小于255字节时，使用1字节表示，否则使用2字节表示。
       varchar存储的内容超出设置的长度时，内容会被截断。
       char是定长的，根据定义的字符串长度分配足够的空间。
       char会根据需要使用空格进行填充方便比较。
       char适合存储很短的字符串，或者所有值都接近同一个长度。
       char存储的内容超出设置的长度时，内容同样会被截断。
    使用策略：
        对于经常变更的数据来说，char比varchar更好，因为char不容易产生碎片。对于非常短的列，char比varchar在存储空间上更有效率。
        使用时要注意只分配需要的空间，更长的列排序时会消耗更多内存。
        尽量避免使用text/blob类型，查询时会使用临时表，导致严重的性能开销。
     4.枚举类型(ENUM),把不重复的数据存储为一个预定义的集合。
      有时可以使用ENUM代替常用的字符串类型。
      ENUM存储非常紧凑，会把列表值压缩到一个或两个字节。
      ENUM在内部存储时，其实存的是整数。
      尽量避免使用数字作为ENUM枚举的常量，因为容易混乱。
      排序是按照内存的整数。
     5.日期和时间类型，尽量使用timestamp，空间效率高于datetime，
      用整数保存时间戳通常不方便处理。
      如果需要存储微妙，可以使用bigint存储。

    答：int(0)表示数据是int类型，长度是0、char(16)表示固定长度字符串，长度为16、varchar(16)表示可变长度字符串，长度为16、datetime表示时间类型、text表示字符串类型，能存储大字符串，最多存储65535字节数据。



  MYSQL基础操作：
    常见操作
    MYSQL的连接和关闭： mysql -u -p -h -p
       -u：指定用户名
       -p：指定密码
       -h：主机
       -p：端口

    进入MySQL命令行后：G、c、q、s、h、d
        G:打印结果垂直显示
        c：取消当前的mysql命令
        q：退出mysql连接
        s：显示服务器状态
        h：帮助信息
        d：改变执行符



Mysql存储引擎：
    1.InnoDB存储引擎：
        ·默认事务型引擎，最重要最广泛的存储引擎，性能非常优秀。
        ·数据存储在共享表空间，可以通过配置分开。也就是多个表和索引都存储在一个表空间中，可以通过配置文件改变此配置。
        ·对主键查询的性能高于高于其它类型的存储引擎。
        ·内部做了很多优化，从磁盘读取数据时会自动构建hash索引，插入数据时自动构建插入缓冲区。
        ·通过一些机制和工具支持真正的热备份。
        ·支持奔溃后的安全恢复。
        ·支持行级锁。
        ·支持外键。

    2.Myisam存储引擎：
        ·拥有全文索引、压缩、空间函数。
        ·不支持事务和行级锁、不支持崩溃后的安全恢复。
        ·表存储在两个文件，MYD和MYI。
        ·设计简答，某些场景下性能很好，例如获取整个表有多少条数据，性能很高。
        ·全文索引不是很常用，不如使用外部的ElasticSearch或Lucene。

    3.其它表引擎：
        Archive，Blackhole、CSV、Memory

    使用策略：在大多数场景下建议使用INNODB存储引擎。


Mysql锁机制
     表锁是日常开发中的常见问题，常见考点。当多个查询同一时刻进行数据修改时，就会产生并发控制的问题。共享锁和排他锁，就是读锁和写锁。
     ·共享锁：不阻塞，多个用户可以同时读一个资源，互不干扰。
     ·排它锁：一个写锁会阻塞其它的读锁和写锁，这样可以只允许一个用户进行写入，防止其它用户读取正在写入的资源。

     锁的粒度：
        ·表锁：系统开销最小，会锁定整张表，myisam使用表锁。
        ·行锁：最大程度的支持并发处理，但是也带来了最大的锁开销，InnoDB使用行锁。

MySQl事务处理
        ·MySQL提供事务处理的表引擎，也就是innoDB。
        ·服务器层不管理事务，由下层的引擎实现，所以同一个事务中，使用多种引擎是不靠谱的。
        ·需要注意的，在非事务表上执行事务操作，mysql不会发出提醒，也不会报错。

    存储过程：
        ·为以后的使用保存的一条或多条MySQL语句的集合，因此也可以在存储过程中加入业务逻辑和流程。
        ·可以在存储过程中创建表，更新数据，删除数据等等。
       使用策略：
            ·可以通过把SQL语句封装在容易使用的单元中，简化复杂的操作。
            ·可以保证数据的一致性
            ·可以简化对变动的管理。

    触发器：
        提供给程序员和数据分析员来保证数据完整性的一种方法，它是与表事件相关的特殊存储过程。

        使用场景：
            ·可以通过数据库中相关表实现级联更改。
            ·实时监控某张表中的某个字段的更改而需要做出的相应的处理。
            ·例如可以生成某些业务的编号。
            ·注意不要滥用，否则会造成数据库及应用程序的维护困难。
            ·重点理解数据类型char和varchar的差异，表存储引擎innodb和myisam的区别。

    问题8：请说明InnoDB和MyISAM的区别：
        ·innoDB支持事务，MyIsam不支持；
        ·InnoDB数据存储在共享表空间，MyIsam数据存储在文件中；
        ·InnoDB支持行级锁，myisam只支持表锁；
        ·InnoDB支持崩溃后的恢复，myisam不支持；
        ·InnoDB支持外键，myisam不支持；
        ·innodb不支持全文索引，myisam支持全文索引；

    问题9：innodb引擎的特性
        ·插入缓冲(insert buffer)
        ·二次写（double write）
        ·自适应哈希索引（ahi）
        ·预读（read ahead）

    问题10：请列举3个以上表引擎
        InnoDB、myisam、memory

    问题11：请说明varchar和text的区别
        ·varchar可指定字符数，text不能指定，内部存储varchar是存入的实际字符数+1个字节(n<=255)或2个字节(n>255),text是实际字符数+2个字节。
        ·text类型不能有默认值。
        ·varchar可直接创建索引，text创建索引要指定前多少个字符。varchar查询速度快于text，在都创建索引的情况下，text的索引几乎不起作用。
        ·查询text需要创建临时表。

    问题12：varchar(50)中50的含义
        最多存放50个字符，varchar(50)和(200)存储hello所占空间一样，但后者在排序时也会消耗更多的内存，因为order by col采用fixed_length计算col长度(memory引擎也一样)。

    问题13：int(20)中20的含义
        是指显示字符的长度，不影响内部存储，只是当定义了zerofill时，前面补多少个0

    问题14：简单描述MySQL中，索引、主键、唯一索引、联合索引的区别，对数据库的性能有什么影响？
        知识点分析：
            主要考察mysql索引的基础和类型，由此延伸出的知识点还包括以下内容：
                ·MySQL索引的创建原则
                ·MySQL索引的注意事项
                ·MySQL索引的原理

        索引的基础
           ·索引类似于书籍的目录，要想找到一本书的某个特定主题，需要先查找书的目录，定位对应的页码；
           ·存储引擎使用类似的方式进行数据查询，先去索引当中找到对应的值，然后根据匹配的索引找到对应的数据行。

        创建索引的语法：
            ·首先创建一个表：create table t1（id int primary key，username varchar(20),password varchar(20)）;
            ·创建单个索引的语法：CREATE INDEX 索引名 on 表名（字段名）
            ·索引名一般是：表名_字段名
            ·给id创建索引：CREATE INDEX t1_id on t1(id);
            ·创建联合索引的语法：CREATE INDEX 索引名 on 表名（字段名1，字段名2）
            ·给username和password创建联合索引：CREATE index t1_username_password ON t1(username,password)
            ·其中index还可以替换成unique，primary key，分别代表唯一索引和主键索引
            ·删除索引：DROP INDEX t1_username_password ON t1

        索引对性能的影响：
            大大减少服务器需要扫描的数据量。
            帮助服务器避免排序和临时表。
            将随机I/O变顺序I/O。
            大大提高查询速度。
            降低写的速度（不良影响）
            磁盘占用（不良影响）。

        索引的使用场景：
            对于非常小的表，大部分情况下全表扫描效率更高。
            中到大型表，索引非常有效。
            特大型的表，建立和使用索引的代价会随之增大，可以使用分区技术来解决。

        索引的类型：
            索引很多种类型，是在MySQL的存储引擎实现的。
                普通索引：最基本的索引，没有任何约束限制。
                唯一索引：和普通索引类似，但是具有唯一性约束。
                主键索引：特殊的唯一索引，不允许有空值。

        索引的区别：
            一个表只能有一个主键索引，但是可以有多个唯一索引。
                主键索引一定是唯一索引，唯一索引不是主键索引。
                主键可以与外键构成参照完整性约束，防止数据不一致。
                联合索引：将多个列组合在一起创建索引，可以覆盖多个列。（也叫复合索引，组合索引）
                外键索引：只有InnoDB类型的表才可以使用外键索引，保证数据的一致性、完整性、和实现级联操作（基本不用）。
                全文索引：MySQL自带的全文索引只能用于MyISAM，并且只能对英文进行全文检索 （基本不用）。

        MySQL索引的创建原则：
            最适合创建索引的列是出现在WHERE或ON子句中的列，或连接子句中的列而不是出现在SELECT关键字后的列。
            索引列的基数越大，数据区分度越高，索引的效果越好。
            对于字符串进行索引，应该制定一个前缀长度，可以节省大量的索引空间。
            根据情况创建联合索引，联合索引可以提高查询效率。
            避免创建过多的索引，索引会额外占用磁盘空间，降低写操作效率。
            主键尽可能选择较短的数据类型，可以有效减少索引的磁盘占用提高查询效率。

        MySQL索引的注意事项：
            1、联合索引遵循前缀原则
                KEY(a,b,c)
                WHERE a = 1 AND b = 2 AND c = 3
                WHERE a = 1 AND b = 2
                WHERE a = 1
                #以上SQL语句可以用到索引
                WHERE b = 2 AND c = 3
                WHERE a = 1 AND c = 3
                #以上SQL语句用不到索引
            2.LIKE查询，%不能在前
                WHERE name LIKE "%wang%"
                #以上语句用不到索引，可以用外部的ElasticSearch、Lucene等全文搜索引擎替代。
            3.列值为空（NULL）时是可以使用索引的，但MySQL难以优化引用了可空列的查询,它会使索引、索引统计和值更加复杂。可空列需要更多的储存空间，还需要在MySQL内部进行特殊处理。
            4.如果MySQL估计使用索引比全表扫描更慢，会放弃使用索引，例如：
                表中只有100条数据左右。对于SQL语句WHERE id > 1 AND id < 100，MySQL会优先考虑全表扫描。
            5.如果关键词or前面的条件中的列有索引，后面的没有，所有列的索引都不会被用到。
            6.列类型是字符串，查询时一定要给值加引号，否则索引失效，例如
                列name varchar(16)，存储了字符串"100"
                WHERE name = 100;
                以上SQL语句能搜到，但无法用到索引。

        MySQL索引原理
            ·MySQL索引是用一种叫做聚簇索引的数据结构实现的，下面我们就来看一下什么是聚簇索引。
            ·聚簇索引是一种数据存储方式，它实际上是在同一个结构中保存了B+树索引和数据行，InnoDB表是按照聚簇索引组织的（类似于Oracle的索引组织表）。
           注：
            ·B+ 树是一种树数据结构，是一个n叉排序树，每个节点通常有多个孩子，一棵B+树包含根节点、内部节点和叶子节点。根节点可能是一个叶子节点，也可能是一个包含两个或两个以上孩子节点的节点。
            ·B+ 树通常用于数据库和操作系统的文件系统中。NTFS, ReiserFS, NSS, XFS, JFS, ReFS 和BFS等文件系统都在使用B+树作为元数据索引。
               B+树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。B+树元素自底向上插入。

          InnoDB通过主键聚簇数据，如果没有定义主键，会选择一个唯一的非空索引代替，如果没有这样的索引，会隐式定义个主键作为聚簇索引。
            下图形象说明了聚簇索引表(InnoDB)和普通的堆组织表(MyISAM)的区别：
                对于普通的堆组织表来说（右图），表数据和索引是分别存储的，主键索引和二级索引存储上没有任何区别。
                而对于聚簇索引表来说（左图），表数据是和主键一起存储的，主键索引的叶结点存储行数据，二级索引的叶结点存储行的主键值。
                聚簇索引表最大限度地提高了I/O密集型应用的性能，但它也有以下几个限制：
                1）插入速度严重依赖于插入顺序，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。
                2）更新主键的代价很高，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义主键为不可更新。
                3）二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。
                二级索引的叶节点存储的是主键值，而不是行指针，这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。

          解题方法：
            在一些MySQL索引基础考题中，我们可以轻松的通过索引基础和类型来解决此类问题，对于一些索引创建注意事项方面的考点，我们可以通过索引创建原则和注意事项来解决。

        问题14：创建MySQL联合索引应该注意什么？

































































